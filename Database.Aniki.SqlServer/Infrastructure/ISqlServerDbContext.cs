using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

namespace Database.Aniki
{
    public interface ISqlServerDbContext<TOption> where TOption : class, IDbContextOptions
    {
        int ExecuteNonQuery(SqlCommand cmd);
        int ExecuteNonQuery(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        int ExecuteNonQuery(string query, CommandType commandType);
        int ExecuteNonQuery(string query, CommandType commandType, Array sqlParameters);
        int ExecuteNonQuery(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<int> ExecuteNonQueryAsync(SqlCommand cmd);
        Task<int> ExecuteNonQueryAsync(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        Task<int> ExecuteNonQueryAsync(string query, CommandType commandType);
        Task<int> ExecuteNonQueryAsync(string query, CommandType commandType, Array sqlParameters);
        Task<int> ExecuteNonQueryAsync(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        SqlDataReader ExecuteReader(SqlCommand cmd);
        SqlDataReader ExecuteReader(SqlCommand cmd, CommandBehavior commandBehavior);
        SqlDataReader ExecuteReader(SqlCommand cmd, SqlConnection connection);
        SqlDataReader ExecuteReader(SqlCommand cmd, SqlConnection connection, CommandBehavior commandBehavior);
        SqlDataReader ExecuteReader(SqlConnection connection, SqlTransaction? transaction, CommandType commandType, string commandText, CommandBehavior commandBehavior, params SqlParameter[] commandParameters);
        SqlDataReader ExecuteReader(SqlConnection connection, SqlTransaction? transaction, CommandType commandType, string commandText, params SqlParameter[] commandParameters);
        SqlDataReader ExecuteReader(string query, CommandType commandType);
        SqlDataReader ExecuteReader(string query, CommandType commandType, CommandBehavior commandBehavior);
        SqlDataReader ExecuteReader(string query, CommandType commandType, CommandBehavior commandBehavior, params SqlParameter[] sqlParameters);
        SqlDataReader ExecuteReader(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<SqlDataReader> ExecuteReaderAsync(SqlCommand cmd);
        Task<SqlDataReader> ExecuteReaderAsync(SqlCommand cmd, CommandBehavior commandBehavior);
        Task<SqlDataReader> ExecuteReaderAsync(SqlCommand cmd, SqlConnection connection);
        Task<SqlDataReader> ExecuteReaderAsync(SqlCommand cmd, SqlConnection connection, CommandBehavior commandBehavior);
        Task<SqlDataReader> ExecuteReaderAsync(SqlConnection connection, SqlTransaction? transaction, CommandType commandType, string commandText, CommandBehavior commandBehavior, params SqlParameter[] commandParameters);
        Task<SqlDataReader> ExecuteReaderAsync(SqlConnection connection, SqlTransaction? transaction, CommandType commandType, string commandText, params SqlParameter[] commandParameters);
        Task<SqlDataReader> ExecuteReaderAsync(string query, CommandType commandType);
        Task<SqlDataReader> ExecuteReaderAsync(string query, CommandType commandType, CommandBehavior commandBehavior);
        Task<SqlDataReader> ExecuteReaderAsync(string query, CommandType commandType, CommandBehavior commandBehavior, params SqlParameter[] sqlParameters);
        Task<SqlDataReader> ExecuteReaderAsync(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        List<string> GetColumnToString(SqlCommand cmd, int columnIndex = 0);
        List<string> GetColumnToString(SqlCommand cmd, SqlConnection connection, int columnIndex = 0, bool closeWhenComplete = false);
        List<string> GetColumnToString(SqlCommand cmd, SqlConnection connection, string columnName, bool closeWhenComplete = false);
        List<string> GetColumnToString(SqlCommand cmd, string columnName);
        Task<List<string>> GetColumnToStringAsync(SqlCommand cmd, int columnIndex = 0);
        Task<List<string>> GetColumnToStringAsync(SqlCommand cmd, SqlConnection connection, int columnIndex = 0, bool closeWhenComplete = false);
        Task<List<string>> GetColumnToStringAsync(SqlCommand cmd, SqlConnection connection, string columnName, bool closeWhenComplete = false);
        Task<List<string>> GetColumnToStringAsync(SqlCommand cmd, string columnName);
        T? GetDataRow<T>(SqlCommand cmd) where T : class, new();
        T? GetDataRow<T>(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false) where T : class, new();
        T? GetDataRow<T>(string query, CommandType commandType) where T : class, new();
        T? GetDataRow<T>(string query, CommandType commandType, Array sqlParameters) where T : class, new();
        T? GetDataRow<T>(string query, CommandType commandType, params SqlParameter[] sqlParameters) where T : class, new();
        Task<T?> GetDataRowAsync<T>(SqlCommand cmd) where T : class, new();
        Task<T?> GetDataRowAsync<T>(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false) where T : class, new();
        Task<T?> GetDataRowAsync<T>(string query, CommandType commandType) where T : class, new();
        Task<T?> GetDataRowAsync<T>(string query, CommandType commandType, Array sqlParameters) where T : class, new();
        Task<T?> GetDataRowAsync<T>(string query, CommandType commandType, params SqlParameter[] sqlParameters) where T : class, new();
        DataSet GetDataSet(SqlCommand cmd);
        DataSet GetDataSet(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        DataSet GetDataSet(string query, CommandType commandType);
        DataSet GetDataSet(string query, CommandType commandType, Array sqlParameters);
        DataSet GetDataSet(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<DataSet> GetDataSetAsync(SqlCommand cmd);
        Task<DataSet> GetDataSetAsync(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        Task<DataSet> GetDataSetAsync(string query, CommandType commandType);
        Task<DataSet> GetDataSetAsync(string query, CommandType commandType, Array sqlParameters);
        Task<DataSet> GetDataSetAsync(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        DataTable GetDataTable(SqlCommand cmd);
        DataTable GetDataTable(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        DataTable GetDataTable(string query, CommandType commandType);
        DataTable GetDataTable(string query, CommandType commandType, Array sqlParameters);
        DataTable GetDataTable(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        List<T> GetDataTable<T>(SqlCommand cmd) where T : class, new();
        List<T> GetDataTable<T>(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false) where T : class, new();
        List<T> GetDataTable<T>(string query, CommandType commandType) where T : class, new();
        List<T> GetDataTable<T>(string query, CommandType commandType, Array sqlParameters) where T : class, new();
        List<T> GetDataTable<T>(string query, CommandType commandType, params SqlParameter[] sqlParameters) where T : class, new();
        Task<DataTable> GetDataTableAsync(SqlCommand cmd);
        Task<DataTable> GetDataTableAsync(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        Task<DataTable> GetDataTableAsync(string query, CommandType commandType);
        Task<DataTable> GetDataTableAsync(string query, CommandType commandType, Array sqlParameters);
        Task<DataTable> GetDataTableAsync(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<List<T>> GetDataTableAsync<T>(SqlCommand cmd) where T : class, new();
        Task<List<T>> GetDataTableAsync<T>(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false) where T : class, new();
        Task<List<T>> GetDataTableAsync<T>(string query, CommandType commandType) where T : class, new();
        Task<List<T>> GetDataTableAsync<T>(string query, CommandType commandType, Array sqlParameters) where T : class, new();
        Task<List<T>> GetDataTableAsync<T>(string query, CommandType commandType, params SqlParameter[] sqlParameters) where T : class, new();
        Dictionary<string, string>? GetDictionary(SqlCommand cmd);
        Dictionary<string, string>? GetDictionary(SqlCommand cmd, int keyColumnIndex, int valueColumnIndex);
        Dictionary<string, string>? GetDictionary(string query, CommandType commandType);
        Dictionary<string, string>? GetDictionary(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex);
        Dictionary<string, string>? GetDictionary(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex, params SqlParameter[] sqlParameters);
        Dictionary<string, string>? GetDictionary(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Dictionary<T, U>? GetDictionary<T, U>(SqlCommand cmd);
        Dictionary<T, U>? GetDictionary<T, U>(SqlCommand cmd, int keyColumnIndex, int valueColumnIndex);
        Dictionary<T, U>? GetDictionary<T, U>(string query, CommandType commandType);
        Dictionary<T, U>? GetDictionary<T, U>(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex);
        Dictionary<T, U>? GetDictionary<T, U>(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex, params SqlParameter[] sqlParameters);
        Dictionary<T, U>? GetDictionary<T, U>(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<Dictionary<string, string>?> GetDictionaryAsync(SqlCommand cmd);
        Task<Dictionary<string, string>?> GetDictionaryAsync(SqlCommand cmd, int keyColumnIndex, int valueColumnIndex);
        Task<Dictionary<string, string>?> GetDictionaryAsync(string query, CommandType commandType);
        Task<Dictionary<string, string>?> GetDictionaryAsync(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex);
        Task<Dictionary<string, string>?> GetDictionaryAsync(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex, params SqlParameter[] sqlParameters);
        Task<Dictionary<string, string>?> GetDictionaryAsync(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<Dictionary<T, U>?> GetDictionaryAsync<T, U>(SqlCommand cmd);
        Task<Dictionary<T, U>?> GetDictionaryAsync<T, U>(SqlCommand cmd, int keyColumnIndex, int valueColumnIndex);
        Task<Dictionary<T, U>?> GetDictionaryAsync<T, U>(string query, CommandType commandType);
        Task<Dictionary<T, U>?> GetDictionaryAsync<T, U>(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex);
        Task<Dictionary<T, U>?> GetDictionaryAsync<T, U>(string query, CommandType commandType, int keyColumnIndex, int valueColumnIndex, params SqlParameter[] sqlParameters);
        Task<Dictionary<T, U>?> GetDictionaryAsync<T, U>(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Dictionary<T, List<U>>? GetDictionaryOfListObjects<T, U>(SqlCommand cmd, int keyColumnIndex) where U : class, new();
        Dictionary<T, List<U>>? GetDictionaryOfListObjects<T, U>(SqlCommand cmd, string keyColumnName) where U : class, new();
        Dictionary<T, List<U>>? GetDictionaryOfListObjects<T, U>(string query, CommandType commandType, int keyColumnIndex) where U : class, new();
        Dictionary<T, List<U>>? GetDictionaryOfListObjects<T, U>(string query, CommandType commandType, string keyColumnName) where U : class, new();
        Task<Dictionary<T, List<U>>?> GetDictionaryOfListObjectsAsync<T, U>(SqlCommand cmd, int keyColumnIndex) where U : class, new();
        Task<Dictionary<T, List<U>>?> GetDictionaryOfListObjectsAsync<T, U>(SqlCommand cmd, string keyColumnName) where U : class, new();
        Task<Dictionary<T, List<U>>?> GetDictionaryOfListObjectsAsync<T, U>(string query, CommandType commandType, int keyColumnIndex) where U : class, new();
        Task<Dictionary<T, List<U>>?> GetDictionaryOfListObjectsAsync<T, U>(string query, CommandType commandType, string keyColumnName) where U : class, new();
        Dictionary<T, U>? GetDictionaryOfObjects<T, U>(SqlCommand cmd, int keyColumnIndex) where U : class, new();
        Dictionary<T, U>? GetDictionaryOfObjects<T, U>(SqlCommand cmd, string keyColumnName) where U : class, new();
        Dictionary<T, U>? GetDictionaryOfObjects<T, U>(string query, CommandType commandType, int keyColumnIndex) where U : class, new();
        Dictionary<T, U>? GetDictionaryOfObjects<T, U>(string query, CommandType commandType, string keyColumnName) where U : class, new();
        Task<Dictionary<T, U>?> GetDictionaryOfObjectsAsync<T, U>(SqlCommand cmd, int keyColumnIndex) where U : class, new();
        Task<Dictionary<T, U>?> GetDictionaryOfObjectsAsync<T, U>(SqlCommand cmd, string keyColumnName) where U : class, new();
        Task<Dictionary<T, U>?> GetDictionaryOfObjectsAsync<T, U>(string query, CommandType commandType, int keyColumnIndex) where U : class, new();
        Task<Dictionary<T, U>?> GetDictionaryOfObjectsAsync<T, U>(string query, CommandType commandType, string keyColumnName) where U : class, new();
        List<List<string>>? GetListListString(SqlCommand cmd);
        List<List<string>>? GetListListString(SqlCommand cmd, string dateFormat);
        List<List<string>>? GetListListString(string query, CommandType commandType);
        List<List<string>>? GetListListString(string query, CommandType commandType, string dateFormat);
        Task<List<List<string>>?> GetListListStringAsync(SqlCommand cmd);
        Task<List<List<string>>?> GetListListStringAsync(SqlCommand cmd, string dateFormat);
        Task<List<List<string>>?> GetListListStringAsync(string query, CommandType commandType);
        Task<List<List<string>>?> GetListListStringAsync(string query, CommandType commandType, string dateFormat);
        List<T> GetListOf<T>(SqlCommand cmd);
        List<T> GetListOf<T>(SqlCommand cmd, SqlConnection connection);
        List<T> GetListOf<T>(string query, CommandType commandType);
        List<T> GetListOf<T>(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<List<T>> GetListOfAsync<T>(SqlCommand cmd);
        Task<List<T>> GetListOfAsync<T>(SqlCommand cmd, SqlConnection connection);
        Task<List<T>> GetListOfAsync<T>(string query, CommandType commandType);
        Task<List<T>> GetListOfAsync<T>(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        object GetScalar(SqlCommand cmd);
        object GetScalar(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        object GetScalar(string query, CommandType commandType);
        object GetScalar(string query, CommandType commandType, Array sqlParameters);
        object GetScalar(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        Task<object> GetScalarAsync(SqlCommand cmd);
        Task<object> GetScalarAsync(SqlCommand cmd, SqlConnection connection, bool closeWhenComplete = false);
        Task<object> GetScalarAsync(string query, CommandType commandType);
        Task<object> GetScalarAsync(string query, CommandType commandType, Array sqlParameters);
        Task<object> GetScalarAsync(string query, CommandType commandType, params SqlParameter[] sqlParameters);
        IOptions<TOption> Options { get; }
    }
}